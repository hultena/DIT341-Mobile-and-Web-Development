{
	"info": {
		"_postman_id": "3ca0199c-9514-4d2e-858a-8d4bbe629539",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "GET /api",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "04428668-d540-4133-998e-6ae55c1614ba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api",
							"host": [
								"{{host}}"
							],
							"path": [
								"api"
							]
						}
					},
					"response": []
				},
				{
					"name": "add user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22f18e64-9994-4661-91af-d2ba32724489",
								"exec": [
									"var jsonData = pm.response.json();",
									"postman.setEnvironmentVariable(\"userId\", jsonData._id);",
									"",
									"pm.test(\"response is CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.username).to.eql('Alexander');",
									"    pm.expect(jsonData.email).to.eql('asd@asd.com');",
									"    pm.expect(jsonData.password).to.eql('abc123')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"username": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\":\"Alexander\",\r\n\t\"email\":\"asd@asd.com\",\r\n\t\"password\":\"abc123\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						},
						"description": "Posting a user."
					},
					"response": []
				},
				{
					"name": "get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2187dca0-1b3c-4e21-a6ee-d7ab55d1ae9c",
								"exec": [
									"var jsonData = pm.response.json();",
									"var arrayLength = jsonData.length;",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"last entry in the array should be the posted user\", function() {",
									"    pm.expect(jsonData[arrayLength-1].username).to.eql(\"Alexander\");",
									"    pm.expect(jsonData[arrayLength-1].email).to.eql('asd@asd.com');    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						},
						"description": "Testing to get all users"
					},
					"response": []
				},
				{
					"name": "get specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1eceb4ca-0c1a-4259-977f-009f2183c2f4",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.username).to.eql('Alexander');",
									"    pm.expect(jsonData.email).to.eql('asd@asd.com');",
									"    pm.expect(jsonData.password).to.eql('abc123');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Testing to get specific user."
					},
					"response": []
				},
				{
					"name": "delete all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d28ddf6f-eb6d-4fb4-ade2-90f7263eb0bd",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should indicate deletion was successful\", function() {",
									"    pm.expect(jsonData.ok).to.eql(1);    ",
									"    pm.expect(jsonData.deletedCount).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "delete all users"
					},
					"response": []
				},
				{
					"name": "get all users 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27847cac-3a4f-4e91-8489-03aa8496dbf9",
								"exec": [
									"var jsonData = pm.response.json();",
									"var arrayLength = jsonData.length;",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"there should be no users\", function() {",
									"    pm.expect(arrayLength).to.eql(0);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						},
						"description": "Testing to get all users"
					},
					"response": []
				},
				{
					"name": "delete all users 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18cce477-90b5-4138-81ce-4b1d6e1aa02b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should indicate deletion was successful\", function() {",
									"    pm.expect(jsonData.ok).to.eql(1);",
									"    pm.expect(jsonData.deletedCount).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "delete all users"
					},
					"response": []
				},
				{
					"name": "add user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a3048d2-d2d4-4f37-851c-86c5c622f8cf",
								"exec": [
									"var jsonData = pm.response.json();",
									"postman.setEnvironmentVariable(\"userId\", jsonData._id);",
									"",
									"pm.test(\"response is CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.username).to.eql('Alexander');",
									"    pm.expect(jsonData.email).to.eql('asd@asd.com');",
									"    pm.expect(jsonData.password).to.eql('abc123')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\":\"Alexander\",\r\n\t\"email\":\"asd@asd.com\",\r\n\t\"password\":\"abc123\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						},
						"description": "Posting a user."
					},
					"response": []
				},
				{
					"name": "get specific user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "954b7750-c11a-4150-97bb-c2025416480b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.username).to.eql('Alexander');",
									"    pm.expect(jsonData.email).to.eql('asd@asd.com');",
									"    pm.expect(jsonData.password).to.eql('abc123');",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get('userId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Testing to get specific user."
					},
					"response": []
				},
				{
					"name": "patch user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34bbd2af-92f0-4ef6-a03c-a8c5d5a9f733",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should indicate correct user was updated\", function() {",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get('userId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"Alexander2\",\n    \"email\": \"asd@asd.com\",\n    \"password\": \"abc123\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "patching user"
					},
					"response": []
				},
				{
					"name": "patch user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1400699-94c8-475f-b321-81fcb3e5e5ca",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should indicate correct user was updated\", function() {",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get('userId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"Alexander3\",\n    \"email\": \"asd@asd.com\",\n    \"password\": \"abc123\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "patching user"
					},
					"response": []
				},
				{
					"name": "replace user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79eea6ac-a373-46ad-a1ce-e1a8a806f69c",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should indicate correct user was updated\", function() {",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get('userId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"Alexander4\",\n    \"email\": \"abc@abc.com\",\n    \"password\": \"abc1234\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "putting user"
					},
					"response": []
				},
				{
					"name": "replace user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d719aacb-df3e-4ebb-a564-886bf2ccf814",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should indicate correct user was updated\", function() {",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get('userId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"Alexander5\",\n    \"email\": \"def@def.com\",\n    \"password\": \"abc12345\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "putting user"
					},
					"response": []
				},
				{
					"name": "add shoppinglist to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb3d311b-7596-4593-a6d2-4dcf24aa4a1a",
								"exec": [
									"var jsonData = pm.response.json();",
									"postman.setEnvironmentVariable(\"shoppingListId\", jsonData._id);",
									"",
									"pm.test(\"response is CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.user).to.eql(pm.environment.get('userId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ingredients\": []\n}"
						},
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/shoppinglists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"shoppinglists"
							]
						},
						"description": "posting user shoppinglist"
					},
					"response": []
				},
				{
					"name": "get specific user shoppinglist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb2d2393-dd6a-4826-b324-31f2bcfc29b9",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.user._id).to.eql(pm.environment.get('userId'));",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get('shoppingListId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/shoppinglists/{{shoppingListId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"shoppinglists",
								"{{shoppingListId}}"
							]
						},
						"description": "getting specific user list"
					},
					"response": []
				},
				{
					"name": "delete specific shoppinglist from user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbe630aa-d086-41b9-9e31-6f1ac5df2cfb",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should indicate correct list was deleted\", function() {",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get('shoppingListId'));",
									"    pm.expect(jsonData.user).to.eql(pm.environment.get('userId'));",
									"});",
									"pm.globals.get(\"variable_key\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/shoppinglists/{{shoppingListId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"shoppinglists",
								"{{shoppingListId}}"
							]
						},
						"description": "Deleting shoppinglist from user"
					},
					"response": []
				},
				{
					"name": "get all shopping lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8965c35b-efab-4563-9b14-6399087e887e",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"response is OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have valid JSON data\", function() {\r",
									"    pm.expect(jsonData.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/shoppinglists",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"shoppinglists"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25e551bb-8f04-4cd7-8e2a-664b25ee16f5",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"response is OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should indicate correct user was deleted\", function() {\r",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get('userId'));\r",
									"});\r",
									"pm.globals.get(\"variable_key\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete specific user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8285814-7bdd-4663-82d0-bb56af9cf1ba",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"response is NOT FOUND\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.globals.get(\"variable_key\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user recipes",
			"item": [
				{
					"name": "create admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70c5a03e-3c41-429d-807f-881842948106",
								"exec": [
									"var jsonData = pm.response.json();",
									"postman.setEnvironmentVariable(\"userId\", jsonData._id);",
									"",
									"pm.test(\"response is CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.username).to.eql('admin');",
									"    pm.expect(jsonData.email).to.eql('admin@yummy.io');",
									"    pm.expect(jsonData.password).to.eql('4dmin');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\":\"admin\",\n\t\"email\":\"admin@yummy.io\",\n\t\"password\":\"4dmin\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/users/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "admin creates blueberry pie recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fbd3bb8-b78a-4cf5-994b-149da8bcb9c1",
								"exec": [
									"var jsonData = pm.response.json();",
									"postman.setEnvironmentVariable(\"recipeId\", jsonData._id);",
									"",
									"pm.test(\"response is CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.user).to.eql(pm.environment.get('userId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Blueberry pie\",\n    \"category\": \"Baking\",\n    \"ingredients\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "return specific admin recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c9c16ba-dc6a-405d-8665-43e45d297f1a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.user._id).to.eql(pm.environment.get('userId'));",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get('recipeId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/recipes/{{recipeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"recipes",
								"{{recipeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin creates swedish meatball recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d11005e-ae6b-4d3c-aa86-59874c24c26d",
								"exec": [
									"var jsonData = pm.response.json();",
									"postman.setEnvironmentVariable(\"recipeId\", jsonData._id);",
									"",
									"pm.test(\"response is CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.user).to.eql(pm.environment.get('userId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Swedish meatballs\",\n    \"category\": \"Cooking\",\n    \"ingredients\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "return all admin's recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73e3841d-2ca5-44bf-9575-95bd2158c61d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.length).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete all recipes",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin creates apple pie recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "244a4d97-8f6f-4c25-8682-e265bec83259",
								"exec": [
									"var jsonData = pm.response.json();",
									"postman.setEnvironmentVariable(\"recipeId\", jsonData._id);",
									"",
									"pm.test(\"response is CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.user).to.eql(pm.environment.get('userId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Apple pie\",\n    \"category\": \"Baking\",\n    \"ingredients\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "update specific admin recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3b396da-667c-4be5-a207-43b6c318891a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should indicate correct recipe was updated\", function() {",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get('recipeId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"allergies\": [\"Nuts\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/recipes/{{recipeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"recipes",
								"{{recipeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete specific admin recipe",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/recipes/{{recipeId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"recipes",
								"{{recipeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin creates lasagna recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b50e6ca2-d16c-4452-9d63-251d95289890",
								"exec": [
									"var jsonData = pm.response.json();",
									"postman.setEnvironmentVariable(\"recipeId\", jsonData._id);",
									"",
									"pm.test(\"response is CREATED\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.user).to.eql(pm.environment.get('userId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Lasagna\",\n    \"category\": \"Cooking\",\n    \"ingredients\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/users/{{userId}}/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}",
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07ea4187-6133-4231-94d8-80a92722892a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should indicate correct user was deleted\", function() {",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get('userId'));",
									"});",
									"pm.globals.get(\"variable_key\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/users/{{userId}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "66e5c689-d688-4a03-a58c-9751d1ef6466",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "69fb8fc7-5963-40bb-9bf6-f2e92eaf16d2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "public recipes",
			"item": [
				{
					"name": "return all recipes in database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8864d080-9928-4149-9ca4-977ec39b6337",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete all recipes in database",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "check if any recipes left in database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f17d8c46-6002-4ea0-b46d-5d098477c905",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"response is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should have valid JSON data\", function() {",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"recipes"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "96431cac-43d6-444f-8885-b585a1ff6a4e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d1968a9b-7f10-48b1-a033-b7ceb1a7f4b6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cd185905-a834-4211-8030-583d17702534",
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}